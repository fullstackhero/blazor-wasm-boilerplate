<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Blazor For Beginners – Getting Started With Blazor" xml:space="preserve">
    <value>Blazor para iniciantes – Começando com o Blazor</value>
  </data>
  <data name="Blazor Hero Description" xml:space="preserve">
    <value>Blazor Hero é um modelo de solução de arquitetura limpa tudo-em-um para Blazor Web-Assembly construído com</value>
  </data>
  <data name="Building A Chat Application With Blazor, Identity, And SignalR" xml:space="preserve">
    <value>Criando um aplicativo de bate-papo com Blazor, Identity e SignalR</value>
  </data>
  <data name="Celebrating 1,500 Stars on Github!" xml:space="preserve">
    <value>Comemorando 1.500 estrelas no Github!</value>
  </data>
  <data name="Component Library" xml:space="preserve">
    <value>Biblioteca de componentes</value>
  </data>
  <data name="Custom Authentication In Blazor WebAssembly – Detailed" xml:space="preserve">
    <value>Autenticação personalizada no Blazor WebAssembly – detalhada</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Modelo de Arquitetura Limpa para Blazor Web-Assembly</value>
  </data>
  <data name="Documentation - Coming Soon" xml:space="preserve">
    <value>Documentação - Em breve</value>
  </data>
  <data name="Exploring Blazor Project Structure" xml:space="preserve">
    <value>Explorando a estrutura do projeto Blazor</value>
  </data>
  <data name="Getting Started" xml:space="preserve">
    <value>Começando</value>
  </data>
  <data name="Github Repository : Do Not Forget to Leave a Star ;)" xml:space="preserve">
    <value>Repositório do Github: Não se esqueça de deixar uma estrela ;)</value>
  </data>
  <data name="Here are few articles that should help you get started with Blazor." xml:space="preserve">
    <value>Aqui estão alguns artigos que devem ajudá-lo a começar a usar o Blazor.</value>
  </data>
  <data name="How To Implement Blazor CRUD Using Entity Framework Core?" xml:space="preserve">
    <value>Como implementar o Blazor CRUD usando o Entity Framework Core?</value>
  </data>
  <data name="Implementing Blazor CRUD Using Mudblazor Component Library In .NET 5" xml:space="preserve">
    <value>Implementando Blazor CRUD usando a biblioteca de componentes Mudblazor no .NET 5</value>
  </data>
  <data name="Important Links" xml:space="preserve">
    <value>Links importantes</value>
  </data>
  <data name="In case you are stuck anywhere or have any queries regarding this implementation, I have compiled a Quick Start Guide for you reference." xml:space="preserve">
    <value>Caso você esteja preso em algum lugar ou tenha alguma dúvida sobre essa implementação, compilei um Guia de início rápido para sua referência.</value>
  </data>
  <data name="Learning Resources" xml:space="preserve">
    <value>Recursos de aprendizagem</value>
  </data>
  <data name="Liked BlazorHero? Star us on Github!" xml:space="preserve">
    <value>Gostou do BlazorHero? Star-nos no Github!</value>
  </data>
  <data name="Onion Architecture In ASP.NET Core With CQRS – Detailed" xml:space="preserve">
    <value>Arquitetura Onion no ASP.NET Core com CQRS – Detalhado</value>
  </data>
  <data name="Project Page" xml:space="preserve">
    <value>Página do projeto</value>
  </data>
  <data name="Quick Start Guide" xml:space="preserve">
    <value>Guia rápido</value>
  </data>
  <data name="Read The Guide" xml:space="preserve">
    <value>Leia o guia</value>
  </data>
  <data name="Support Me" xml:space="preserve">
    <value>Ajude-me!</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Blazor Hero</value>
  </data>
</root>